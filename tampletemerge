
    #include <iostream>
    #include <cassert>
    
    using namespace std;

    class Compar {
    public:
        Compar(int vCompar);
        Compar();
        friend bool operator< (const Compar &l, const Compar &r);
        friend bool operator> (const Compar &l, const Compar &r);
    private:
    int vCompar;
    };

    Compar::Compar(int l) {
        vCompar = l;
    }

    Compar::Compar(){
        vCompar = 0;
    }

    bool operator< (const Compar &left, const Compar &right)
    {
         return left.vCompar < right.vCompar;
    }

    bool operator> (const Compar &left, const Compar &right) {
         return left.vCompar > right.vCompar;
    }

    template <class T>
    void merge( vector<T> &a, vector<T> &x, int s, int e, int m) {
    // s = start of range to sort
    // e = end of range to sort
        int i, j, k;
        i = s;
        k = 0;
        j = m + 1;
    
        while (i <= m && j <= e)
        {
            if (a[i] < a[j])
            {
                x[k] = a[i];
                k++;
                i++;
            }
            else
            {
                x[k] = a[j];
                k++;
                j++;
            }
        }
    
        while (i <= m)
        {
            x[k] = a[i];
            k++;
            i++;
        }
    
        while (j <= e)
        {
            x[k] = a[j];
            k++;
            j++;
        }
    
        //allocate data back from x[] into a[].
        for (i = s; i <= e; i++)
        {
            a[i] = x[i-s];
        }
    }
    
    template <class T>
    void msort (vector<T> &a, vector<T> &x, int s, int e) {
        if (e - s < 1){
            return;
        }
        int m = (e + s)/2;
        msort(a, x, s, m);
        msort(a, x, m + 1, e);
        merge(a, x, s, e, m);
    }
    
    template <class T>
    void mergesort(vector<T> &a, int n) {
        T *x = new int[n];
        msort(a,x,0, n-1);
        delete []x;
    }
    
    template <class T>
    bool sorted( T a[], int n) {
        for (int i=0; i<n-1; ++i){
            if (a[i] > a[i+1])
                return false;
        }
        return true;
    }
    
    int main(int argc, char * args[]) {
        vector<int>(1000);
        for (int i = 0; i < 1000; ++i) a[i] = -50 + rand() % 100;
        mergesort(a, 1000);
        assert(sorted(a, 1000));
    
        vector<int> b(1001);
        for (int i = 0; i < 1001; ++i) b[i] = -50 + rand() % 100;
        mergesort(b, 1001);
        assert(sorted(b, 1001));
    
        vector<int> c(1, 2);
        mergesort(c, 1);
        assert(sorted(c, 1));
    
        vector<int> d(5);
        mergesort(d, 5);
        assert(sorted(d, 5));
        
        vector<Compar> e(5);
        for (int i = 4; i >= 0; i--) {
        Compar y(i);
        e[i] = y;
    }
    mergesort(e, 5);
    assert(sorted(e, 5));
        cout << "All tests passed." << endl;
    }
